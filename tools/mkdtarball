#!/usr/bin/env bash

# Abort on any error
set -e

usage() {
  cat <<EOF
Usage: $(basename $0) DHOME

  Create a release tarball and zip archive of a disassembly. DHOME is the
  disassembly home directory.
EOF
  exit 1
}

readme() {
  cat <<EOF
The HTML disassembly in this archive was built from the source files in the
'sources' subdirectory using version $SK_VERSION of SkoolKit.

SkoolKit can be obtained from the following locations:

  - http://skoolkit.ca/
  - https://launchpad.net/skoolkit

The HTML disassembly can be built from the source files by following these
steps:

1. Download and unpack SkoolKit $SK_VERSION.

2. Copy every file from the 'sources' subdirectory in this archive to the
   directory where SkoolKit was unpacked.

3. Change to the directory where SkoolKit was unpacked and run this command:

   $ ./skool2html.py $REFFILE
EOF
}

asm_header() {
  cat <<EOF
An ASM version of the disassembly in this archive can be built from the source
files in the 'sources' subdirectory using version $SK_VERSION of SkoolKit.

SkoolKit can be obtained from the following locations:

  - http://skoolkit.ca/
  - https://launchpad.net/skoolkit

The ASM disassembly can be built by following these steps:

1. Download and unpack SkoolKit $SK_VERSION.

2. Copy '$PREFIX.skool' from the 'sources' subdirectory in this archive
   to the directory where SkoolKit was unpacked.

3. Change to the directory where SkoolKit was unpacked and run this command:

  $ ./skool2asm.py $PREFIX.skool > $PREFIX.asm

Now $PREFIX.asm can be assembled using pasmo (http://pasmo.speccy.org/):

  $ pasmo $PREFIX.asm $PREFIX.bin

Alternatively, $PREFIX.skool can be converted to a binary file by the
skool2bin.py utility, included with SkoolKit:

  $ ./skool2bin.py $SKOOL2BINOPTS $PREFIX.skool

To create a TAP file from $PREFIX.bin, use the bin2tap.py utility,
included with SkoolKit:

  $ ./bin2tap.py $PREFIX.bin

The resultant TAP file, $PREFIX.tap, can be loaded into an emulator, and
the game will start automatically.
EOF
}

if (($# < 1)); then
  usage
fi

DHOME=$1
if [[ ! -d $DHOME ]]; then
  echo "Error: directory not found: $DHOME"
  exit 1
fi

DRELEASERC=$DHOME/.dreleaserc
if [[ ! -f $DRELEASERC ]]; then
  echo "Error: file not found: $DRELEASERC"
  exit 1
fi

. $DRELEASERC

PREFIX=$(basename $REFFILE .ref)

# Determine the SkoolKit version number
if [[ ! -f skool2html.py ]]; then
  echo "Error: skool2html.py not found."
  exit 1
fi
SK_VERSION=$(./skool2html.py -V 2>&1 | cut -f2 -d' ')

# Determine the disassembly version number
VERSION=$(grep ^Release= $DHOME/sources/$REFFILE | awk '{print $NF}' || true)
if [[ -z $VERSION ]]; then
  echo "Error: could not find version number in $REFFILE"
  exit 1
fi

# Copy all files required to build the disassembly into the 'src' directory
rm -rf src
mkdir src
cp -p $DHOME/sources/*.skool src
cp -p $DHOME/sources/*.ref src
cp -p $DHOME/sources/*.css src
find $DHOME/sources -name '*.js' -exec cp -p {} src \;
cp -p $DHOME/sources/*.py src

DISTDIR=dist
PKGNAME=$GAME-disassembly-$VERSION
ABSDIR=${DISTDIR}/${PKGNAME}
rm -rf $ABSDIR

# Build the HTML disassembly
echo -n "Writing disassembly..."
cd src
../skool2html.py -q -S ../resources -d ../${ABSDIR} $REFFILE
cd ..
mv ${ABSDIR}/* ${ABSDIR}/html
echo "done"

# Copy source files
echo -n "Copying source files..."
rm -f src/*.pyc
cp -a src ${ABSDIR}/sources
cp -p $DHOME/sources/COPYING $ABSDIR/sources
readme > ${ABSDIR}/readme.txt
asm_header > ${ABSDIR}/asm.txt
echo "done"

cd $DISTDIR

echo "Creating ${DISTDIR}/${PKGNAME}.tar.xz"
tar acf ${PKGNAME}.tar.xz $PKGNAME

echo "Creating ${DISTDIR}/${PKGNAME}.zip"
zip -9qr ${PKGNAME}.zip $PKGNAME

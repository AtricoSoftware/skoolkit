#!/usr/bin/env bash
set -e # Abort on errors

SKTMPDIR=$HOME/tmp
SKOOLKIT_KEY=938CD04A
COMMANDS=$(echo {bin2tap,skool2{asm,bin,ctl,html,sft},sna2skool,tap{2sna,info}}.py)

###############################################################################
# Check required environment variables
###############################################################################
_require_skoolkit() {
  if [ -z "$SKOOLKIT_HOME" ]; then
    echo "Error: SKOOLKIT_HOME not defined."
    exit 1
  fi
  if [ ! -d "$SKOOLKIT_HOME" ]; then
    echo "Error: directory not found: $SKOOLKIT_HOME"
    exit 1
  fi
  TOOLS=$SKOOLKIT_HOME/tools
  VERSION=$($SKOOLKIT_HOME/skool2html.py -V 2>&1 | cut -f2 -d' ')
  TARBALL=$SKOOLKIT_HOME/dist/skoolkit-$VERSION.tar.xz
}

_require_disassemblies() {
  if [[ -z $SKOOLDAZE_HOME ]]; then
    echo "Error: SKOOLDAZE_HOME not defined."
    exit 1
  fi
  if [[ ! -d $SKOOLDAZE_HOME ]]; then
    echo "Error: directory not found: $SKOOLDAZE_HOME"
    exit 1
  fi

  if [[ -z $BACKTOSKOOL_HOME ]]; then
    echo "Error: BACKTOSKOOL_HOME not defined."
    exit 1
  fi
  if [[ ! -d $BACKTOSKOOL_HOME ]]; then
    echo "Error: directory not found: $BACKTOSKOOL_HOME"
    exit 1
  fi

  if [[ -z $CONTACTSAMCRUISE_HOME ]]; then
    echo "Error: CONTACTSAMCRUISE_HOME not defined."
    exit 1
  fi
  if [[ ! -d $CONTACTSAMCRUISE_HOME ]]; then
    echo "Error: directory not found: $CONTACTSAMCRUISE_HOME"
    exit 1
  fi

  if [[ -z $MANICMINER_HOME ]]; then
    echo "Error: MANICMINER_HOME not defined."
    exit 1
  fi
  if [[ ! -d $MANICMINER_HOME ]]; then
    echo "Error: directory not found: $MANICMINER_HOME"
    exit 1
  fi

  if [[ -z $JETSETWILLY_HOME ]]; then
    echo "Error: JETSETWILLY_HOME not defined."
    exit 1
  fi
  if [[ ! -d $JETSETWILLY_HOME ]]; then
    echo "Error: directory not found: $JETSETWILLY_HOME"
    exit 1
  fi
}

###############################################################################
# Utility functions
###############################################################################
_exec() {
  message=$1
  command=$2
  logfile=$3

  echo -n "${message}: "
  if ! $command &> $logfile; then
    echo "FAILED (see $logfile)"
    return 1
  fi
  echo "OK"
}

_wait() {
  message=$1
  pid=$2
  failsuffix=$3
  oksuffix=${4:-$failsuffix}

  echo -n "${message}: "
  if wait $pid; then
    [[ "$oksuffix" = _ ]] && echo "OK" || echo "OK $oksuffix"
  else
    echo "FAILED $failsuffix"
  fi
}

_cd_tmpdir() {
  mkdir -p $SKTMPDIR
  cd $(mktemp -d --tmpdir=$SKTMPDIR)
}

_create_venv() {
  venvdir=${1:-venv}

  _exec "Creating virtual environment" "virtualenv --quiet $venvdir" $(pwd)/venv.log
}

_build_tarball() {
  echo -n "Building tarball for version $VERSION of SkoolKit: "
  $TOOLS/mksktarball -q -t
  echo "OK"
}

_check_commands() {
  path=$1
  logdir=$2

  for cmdname in $COMMANDS; do
    echo -n "Running $cmdname: "
    cmd=$path/$cmdname
    if [[ ! -f $cmd ]]; then
      echo "FAILED ($cmd not found)"
      return 1
    fi
    logfile=$logdir/$cmdname.log
    $cmd &> $logfile || :
    firstword=$(head -n 1 $logfile | cut -f1 -d' ')
    if [[ "$firstword" != "usage:" ]]; then
      echo "FAILED (see $logfile)"
      return 1
    fi
    echo "OK"
  done
}

_check_man_pages() {
  echo -n "Checking man pages: "
  for cmdname in $COMMANDS; do
    manpage=/usr/share/man/man1/$cmdname.1.gz
    if [[ ! -f $manpage ]]; then
      echo "FAILED ($manpage not found)"
      return 1
    fi
  done
  echo "OK"
}

_check_files() {
  filetype=$1
  expdir=$2
  logdir=$3
  shift 3
  expfiles=$*

  echo -n "Checking $filetype: "
  if [[ ! -d $expdir ]]; then
    echo "FAILED ($expdir does not exist)"
    return 1
  fi
  rcount=0
  for f in $expfiles; do
    resource=$expdir/$f
    if [[ ! -f $resource ]]; then
      echo "FAILED ($f not found in $expdir)"
      return 1
    fi
    let rcount+=1
  done
  rlist=$logdir/$filetype.txt
  ls -1 $expdir > $rlist
  numresources=$(cat $rlist | wc -l)
  if [[ $numresources -ne $rcount ]]; then
    echo "FAILED (unexpected files found; see $rlist)"
    return 1
  fi
  echo "OK"
}

_check_resources() {
  rootdir=$1
  logdir=$2

  _check_files resources $rootdir $logdir skoolkit{,-dark,-green,-plum,-wide}.css
}

_check_examples() {
  rootdir=$1
  logdir=$2

  _check_files examples $rootdir $logdir 48.rom.{ctl,ref} hungry_horace.{ctl,ref,t2s}
}

###############################################################################
# Run the disassemblies (MM/JSW/SD/BTS/CSC) tests
###############################################################################
test_disassemblies() {
  _require_skoolkit
  _require_disassemblies

  mkdir -p $MANICMINER_HOME/build
  mmlog=$MANICMINER_HOME/build/tests.log
  mkdir -p $JETSETWILLY_HOME/build
  jswlog=$JETSETWILLY_HOME/build/tests.log
  mkdir -p $SKOOLDAZE_HOME/build
  sdlog=$SKOOLDAZE_HOME/build/tests.log
  mkdir -p $BACKTOSKOOL_HOME/build
  btslog=$BACKTOSKOOL_HOME/build/tests.log
  mkdir -p $CONTACTSAMCRUISE_HOME/build
  csclog=$CONTACTSAMCRUISE_HOME/build/tests.log

  make -C $MANICMINER_HOME test{2.7,3.{2,3,4}} &> $mmlog & PIDmm=$!
  make -C $JETSETWILLY_HOME test{2.7,3.{2,3,4}} &> $jswlog & PIDjsw=$!
  make -C $SKOOLDAZE_HOME test{2.7,3.{2,3,4}} &> $sdlog & PIDsd=$!
  make -C $BACKTOSKOOL_HOME test{2.7,3.{2,3,4}} &> $btslog & PIDbts=$!
  make -C $CONTACTSAMCRUISE_HOME test{2.7,3.{2,3,4}} &> $csclog & PIDcsc=$!

  _wait "Manic Miner tests" $PIDmm "(see $mmlog)" _
  _wait "Jet Set Willy tests" $PIDjsw "(see $jswlog)" _
  _wait "Skool Daze tests" $PIDsd "(see $sdlog)" _
  _wait "Back to Skool tests" $PIDbts "(see $btslog)" _
  _wait "Contact Sam Cruise tests" $PIDcsc "(see $csclog)" _
}

###############################################################################
# Run validate-xhtml on the ROM/HH/MM/JSW/SD/BTS/CSC disassemblies
###############################################################################
_run_validate_xhtml() {
  projhome=$1
  target=$2
  htmldir=$3

  builddir=$projhome/build/html
  buildlog=$builddir/$target.log
  htmllog=$builddir/$htmldir.log
  rm -rf $builddir/$htmldir $buildlog $htmllog
  mkdir -p $builddir
  make -C $projhome $target &> $buildlog &&
  $TOOLS/validate-xhtml $builddir/$htmldir &> $htmllog
}

_wait_validate_xhtml() {
  name=$1
  pid=$2
  projhome=$3
  target=$4
  htmldir=$5

  builddir=$projhome/build/html
  htmllog=$builddir/$htmldir.log
  echo -n "$name validate-xhtml: "
  if wait $pid; then
    [[ -s $htmllog ]] && echo "VALIDATION FAILED (see $htmllog)" || echo "OK"
  else
    echo "BUILD FAILED (see $builddir/$target.log)"
  fi
}

validate_xhtml() {
  _require_skoolkit
  _require_disassemblies

  _run_validate_xhtml $SKOOLKIT_HOME rom rom & PIDrom=$!
  _run_validate_xhtml $SKOOLKIT_HOME hh hungry_horace & PIDhh=$!
  _run_validate_xhtml $MANICMINER_HOME mm manic_miner & PIDmm=$!
  _run_validate_xhtml $JETSETWILLY_HOME jsw jet_set_willy & PIDjsw=$!
  _run_validate_xhtml $SKOOLDAZE_HOME sd skool_daze & PIDsd=$!
  _run_validate_xhtml $BACKTOSKOOL_HOME bts back_to_skool & PIDbts=$!
  _run_validate_xhtml $CONTACTSAMCRUISE_HOME csc contact_sam_cruise & PIDcsc=$!

  _wait_validate_xhtml "Spectrum ROM" $PIDrom $SKOOLKIT_HOME rom rom
  _wait_validate_xhtml "Hungry Horace" $PIDhh $SKOOLKIT_HOME hh hungry_horace
  _wait_validate_xhtml "Manic Miner" $PIDmm $MANICMINER_HOME mm manic_miner
  _wait_validate_xhtml "Jet Set Willy" $PIDjsw $JETSETWILLY_HOME jsw jet_set_willy
  _wait_validate_xhtml "Skool Daze" $PIDsd $SKOOLDAZE_HOME sd skool_daze
  _wait_validate_xhtml "Back to Skool" $PIDbts $BACKTOSKOOL_HOME bts back_to_skool
  _wait_validate_xhtml "Contact Sam Cruise" $PIDcsc $CONTACTSAMCRUISE_HOME csc contact_sam_cruise
}

###############################################################################
# Run disassembly-diff on the MM/JSW/SD/BTS/CSC disassemblies
###############################################################################
disassembly_diffs() {
  _require_skoolkit
  _require_disassemblies

  mmdiffsdir=$MANICMINER_HOME/build/disassembly-diff
  jswdiffsdir=$JETSETWILLY_HOME/build/disassembly-diff
  sddiffsdir=$SKOOLDAZE_HOME/build/disassembly-diff
  btsdiffsdir=$BACKTOSKOOL_HOME/build/disassembly-diff
  cscdiffsdir=$CONTACTSAMCRUISE_HOME/build/disassembly-diff
  diffslog=diffs.log
  DISASSEMBLY_DIFF="$TOOLS/disassembly-diff -t"

  _build_tarball
  for d in $mmdiffsdir $jswdiffsdir $sddiffsdir $btsdiffsdir $cscdiffsdir; do
    mkdir -p $d
    cp -p $TARBALL $d
    rm -rf $d/disassembly-current-*
  done

  (cd $mmdiffsdir; $DISASSEMBLY_DIFF mm &> $diffslog) & PIDmm=$!
  (cd $jswdiffsdir; $DISASSEMBLY_DIFF jsw &> $diffslog) & PIDjsw=$!
  (cd $sddiffsdir; $DISASSEMBLY_DIFF sd &> $diffslog) & PIDsd=$!
  (cd $btsdiffsdir; $DISASSEMBLY_DIFF bts &> $diffslog) & PIDbts=$!
  (cd $cscdiffsdir; $DISASSEMBLY_DIFF csc &> $diffslog) & PIDcsc=$!

  _wait "Manic Miner disassembly-diff" $PIDmm "(see $mmdiffsdir/$diffslog)"
  _wait "Jet Set Willy disassembly-diff" $PIDjsw "(see $jswdiffsdir/$diffslog)"
  _wait "Skool Daze disassembly-diff" $PIDsd "(see $sddiffsdir/$diffslog)"
  _wait "Back to Skool disassembly-diff" $PIDbts "(see $btsdiffsdir/$diffslog)"
  _wait "Contact Sam Cruise disassembly-diff" $PIDcsc "(see $cscdiffsdir/$diffslog)"
}

###############################################################################
# Run check-asms on the MM/JSW/SD/BTS/CSC disassemblies
###############################################################################
check_asms() {
  _require_skoolkit
  _require_disassemblies

  asmsubdir=build/disassembly-diff/disassembly-current-$VERSION/asm
  mmasmdir=$MANICMINER_HOME/$asmsubdir
  jswasmdir=$JETSETWILLY_HOME/$asmsubdir
  sdasmdir=$SKOOLDAZE_HOME/$asmsubdir
  btsasmdir=$BACKTOSKOOL_HOME/$asmsubdir
  cscasmdir=$CONTACTSAMCRUISE_HOME/$asmsubdir
  asmlog=asm.log
  CHECK_ASMS=$TOOLS/check-asms

  (cd $mmasmdir; $CHECK_ASMS mm &> $asmlog) & PIDmm=$!
  (cd $jswasmdir; $CHECK_ASMS jsw &> $asmlog) & PIDjsw=$!
  (cd $sdasmdir; $CHECK_ASMS sd &> $asmlog) & PIDsd=$!
  (cd $btsasmdir; $CHECK_ASMS bts &> $asmlog) & PIDbts=$!
  (cd $cscasmdir; $CHECK_ASMS csc &> $asmlog) & PIDcsc=$!

  _wait "Manic Miner check-asms" $PIDmm "(see $mmasmdir/$asmlog)" _
  _wait "Jet Set Willy check-asms" $PIDjsw "(see $jswasmdir/$asmlog)" _
  _wait "Skool Daze check-asms" $PIDsd "(see $sdasmdir/$asmlog)" _
  _wait "Back to Skool check-asms" $PIDbts "(see $btsasmdir/$asmlog)" _
  _wait "Contact Sam Cruise check-asms" $PIDcsc "(see $cscasmdir/$asmlog)" _
}

###############################################################################
# Verify that 'setup.py install' works
###############################################################################
_install_skoolkit() {
  method=$1

  tar xf $TARBALL -C $topdir
  mv $topdir/skoolkit-$VERSION{,-release}
  cd $topdir/skoolkit-$VERSION-release

  if [[ "$method" = "2" ]]; then
    _exec "Building source distribution" "./setup.py sdist" $topdir/sdist.log
    tar xf dist/skoolkit-$VERSION.tar.gz -C $topdir
    cd $topdir/skoolkit-$VERSION
  fi

  _exec "Installing SkoolKit" "$venv/bin/python setup.py install" $topdir/install.log
}

verify_setup() {
  method=$1

  _require_skoolkit

  _cd_tmpdir
  topdir=$(pwd)
  venv=$topdir/venv
  _create_venv $venv
  _build_tarball
  _install_skoolkit $method
  _check_commands $venv/bin $topdir
  packagedir=$($venv/bin/skool2html.py -p)
  _check_resources $packagedir/resources $topdir
}

###############################################################################
# Build, install, verify and uninstall a DEB package
###############################################################################
build_deb() {
  _require_skoolkit

  debname=skoolkit_$VERSION-1_all.deb
  deb=$SKOOLKIT_HOME/dist/$debname
  logdir=$SKOOLKIT_HOME/dist
  mkdir -p $logdir

  sudo dpkg -r skoolkit &> /dev/null

  _exec "Building $debname" "make -C $SKOOLKIT_HOME deb" $logdir/debuild.log
  _exec "Installing $debname" "sudo dpkg -i $deb" $logdir/dpkg-i.log
  _check_commands /usr/bin $logdir
  _check_man_pages
  _check_resources $(/usr/bin/skool2html.py -p)/resources $logdir
  _check_examples /usr/share/skoolkit/examples $logdir
  _exec "Uninstalling skoolkit" "sudo dpkg -r skoolkit" $logdir/dpkg-r.log
}

###############################################################################
# Build, install, verify and uninstall an RPM package
###############################################################################
build_rpm() {
  _require_skoolkit

  rpmname=skoolkit-$VERSION-1.noarch.rpm
  rpm=$SKOOLKIT_HOME/dist/$rpmname
  logdir=$SKOOLKIT_HOME/dist
  mkdir -p $logdir

  sudo rpm -e skoolkit &> /dev/null || true

  _exec "Building $rpmname" "make -C $SKOOLKIT_HOME rpm" $logdir/rpmbuild.log
  _exec "Installing $rpmname" "sudo rpm -i $rpm" $logdir/rpm-i.log
  _check_commands /usr/bin $logdir
  _check_man_pages
  _check_resources $(/usr/bin/skool2html.py -p)/resources $logdir
  _check_examples /usr/share/skoolkit/examples $logdir
  _exec "Uninstalling skoolkit" "sudo rpm -e skoolkit" $logdir/rpm-e.log
}

###############################################################################
# Prepare documentation on the gh-pages branch
###############################################################################
prepare_gh_pages() {
  _require_skoolkit

  _cd_tmpdir
  logfile=$(pwd)/sphinx.log
  echo -n "Cloning skoolkit repository: "
  git clone -q https://github.com/skoolkid/skoolkit
  echo "OK"
  cd skoolkit
  sed -i 's/^\(SPHINXOPTS.*=\)$/\1 -D html_theme=sphinxdoc/' sphinx/Makefile
  _exec "Building documentation" "make -C sphinx html" $logfile
  git checkout -- sphinx/Makefile
  rm -rf sphinx/build/html/{.buildinfo,_sources/man,man,objects.inv}
  git checkout -q gh-pages
  rsync -a sphinx/build/html/ .
  rm -rf skoolkit sphinx
  echo
  git status -bs
  cat <<EOM

Now:
  \$ cd $(pwd)
  # Remove any pages that are no longer used
  # Add any new pages or files
  \$ git commit -am "Update SkoolKit documentation to $VERSION"
  \$ git push origin gh-pages
EOM
}

###############################################################################
# Build a source package for uploading to PyPI
###############################################################################
build_sdist() {
  _require_skoolkit

  [[ -f $TARBALL ]] && echo "Found $TARBALL" || _build_tarball
  _cd_tmpdir
  logfile=$(pwd)/sdist.log
  tar xf $TARBALL
  cd skoolkit-$VERSION
  _exec "Building source package" "./setup.py sdist" $logfile
  sdist=skoolkit-$VERSION.tar.gz
  mv dist/$sdist $SKOOLKIT_HOME/dist
  echo "Now upload $SKOOLKIT_HOME/dist/$sdist to PyPI"
}

###############################################################################
# Verify that SkoolKit can be installed from PyPI
###############################################################################
check_pypi() {
  _cd_tmpdir
  _create_venv
  _exec "Installing SkoolKit from PyPI" "venv/bin/pip install skoolkit" $(pwd)/install.log
}

###############################################################################
# Build a documentation zip archive for PyPI
###############################################################################
build_doczip() {
  _require_skoolkit

  zipfile=$SKOOLKIT_HOME/dist/skoolkit-$VERSION-docs.zip

  _cd_tmpdir
  echo -n "Cloning local git repository: "
  git clone -ql $SKOOLKIT_HOME
  echo "OK"
  logfile=$(pwd)/sphinx.log
  cd skoolkit/sphinx
  sed -i 's/^\(SPHINXOPTS.*=\)$/\1 -D html_theme=nature/' Makefile
  _exec "Building documentation" "make html" $logfile
  cd build/html
  rm -rf .buildinfo _sources/man man objects.inv $zipfile
  echo -n "Building zip archive: "
  zip -9qr $zipfile .
  echo "OK"
  echo "Now upload $zipfile to PyPI"
}

###############################################################################
# Build and upload a signed source package to the SkoolKit PPA
###############################################################################
upload_ppa_source() {
  _require_skoolkit

  _cd_tmpdir
  [[ -f $TARBALL ]] && echo "Found $TARBALL" || _build_tarball
  cp -p $TARBALL skoolkit_$VERSION.orig.tar.xz
  tar xf skoolkit_$VERSION.orig.tar.xz
  cd skoolkit-$VERSION
  cp -a $SKOOLKIT_HOME/debian .
  sed -i 's/ unstable; / precise; /g' debian/changelog
  debuild -S -k$SKOOLKIT_KEY

  dputconf=$HOME/.dput.cf
  if ! grep '^\[skoolkit-ppa\]$' $dputconf &> /dev/null; then
    cat >> $dputconf <<EOF
[skoolkit-ppa]
fqdn = ppa.launchpad.net
method = ftp
incoming = ~rjdymond/ppa/ubuntu/
login = anonymous
allow_unsigned_uploads = 0
EOF
  fi
  dput skoolkit-ppa ../skoolkit_$VERSION-1_source.changes
}

###############################################################################
# Update the SkoolKit project on launchpad.net
###############################################################################
update_launchpad() {
  _require_skoolkit

  files=$(echo skoolkit{-$VERSION{.tar.xz,.zip,-1.noarch.rpm},_$VERSION-1_all.deb})

  echo -n "Checking files to upload: "
  for f in $files; do
    fname=$SKOOLKIT_HOME/dist/$f
    if [[ ! -f $fname ]]; then
      echo "FAILED ($fname not found)"
      exit 1
    fi
  done
  echo "OK"

  read -sp "Enter passphrase: " pp
  echo -ne "\nSigning files: "
  for fname in $files; do
    f=$SKOOLKIT_HOME/dist/$fname
    rm -f $f.asc
    logfile=$f.log
    if ! gpg -asb --batch --default-key $SKOOLKIT_KEY --passphrase $pp $f &> $logfile; then
      echo "FAILED (see $logfile)"
      exit 1
    fi
    rm -f $logfile
  done
  echo "OK"

  $TOOLS/lputil.py --production $VERSION
}

###############################################################################
# Print usage information
###############################################################################
usage() {
  cat >&2 <<EOM
Usage: $(basename $0) COMMAND [COMMAND...]

SkoolKit testing and release tool.

Pre-release commands:
  dtests - run the disassemblies (MM/JSW/SD/BTS/CSC) tests
  xhtmlv - run validate-xhtml on the ROM/HH/MM/JSW/SD/BTS/CSC disassemblies
  ddiffs - run disassembly-diff on the MM/JSW/SD/BTS/CSC disassemblies
  asmchk - run check-asms on the MM/JSW/SD/BTS/CSC disassemblies
  setup1 - verify that 'setup.py install' works from a release tarball
  setup2 - verify that 'setup.py install' works from an sdist tarball

Post-release commands:
  debpkg - build, install, verify and uninstall a DEB package
  rpmpkg - build, install, verify and uninstall an RPM package
  ghdocs - prepare documentation on the gh-pages branch
  bsdist - build a source package for uploading to PyPI
  ifpypi - verify that SkoolKit can be installed from PyPI
  doczip - build a documentation zip archive for PyPI
  ppadeb - build and upload a signed source package to the SkoolKit PPA
  sklpad - update the SkoolKit project on launchpad.net
EOM
}

###############################################################################
# Parse command line
###############################################################################
[[ -z "$1" ]] && usage
numcommands=$#

while [[ -n "$1" ]]; do
  [[ $numcommands -ge 2 ]] && echo "*** Running command '$1' ***"
  case "$1" in
    dtests) test_disassemblies ;;
    xhtmlv) validate_xhtml ;;
    ddiffs) disassembly_diffs ;;
    asmchk) check_asms ;;
    setup1) verify_setup 1 ;;
    setup2) verify_setup 2 ;;
    debpkg) build_deb ;;
    rpmpkg) build_rpm ;;
    ghdocs) prepare_gh_pages ;;
    bsdist) build_sdist ;;
    ifpypi) check_pypi ;;
    doczip) build_doczip ;;
    ppadeb) upload_ppa_source ;;
    sklpad) update_launchpad ;;
         *) echo "*** Unknown command '$1' ***"; usage ;;
  esac
  shift
done

#!/usr/bin/env bash
set -e # Abort on errors

###############################################################################
# Check required environment variables
###############################################################################
if [ -z "$SKOOLKIT_HOME" ]; then
  echo "Error: SKOOLKIT_HOME not defined."
  exit 1
fi
if [ ! -d "$SKOOLKIT_HOME" ]; then
  echo "Error: directory not found: $SKOOLKIT_HOME"
  exit 1
fi

if [ -z "$MANICMINER_HOME" ]; then
  echo "Error: MANICMINER_HOME not defined."
  exit 1
fi
if [ ! -d "$MANICMINER_HOME" ]; then
  echo "Error: directory not found: $MANICMINER_HOME"
  exit 1
fi

if [ -z "$JETSETWILLY_HOME" ]; then
  echo "Error: JETSETWILLY_HOME not defined."
  exit 1
fi
if [ ! -d "$JETSETWILLY_HOME" ]; then
  echo "Error: directory not found: $JETSETWILLY_HOME"
  exit 1
fi

if [ -z "$DISASSEMBLIES_HOME" ]; then
  echo "Error: DISASSEMBLIES_HOME not defined."
  exit 1
fi
if [ ! -d "$DISASSEMBLIES_HOME" ]; then
  echo "Error: directory not found: $DISASSEMBLIES_HOME"
  exit 1
fi

TOOLS=$SKOOLKIT_HOME/tools
SKTMPDIR=$HOME/tmp

###############################################################################
# Utility functions
###############################################################################
_check_commands() {
  path=$1
  logdir=$2

  for cmdname in {bin2tap,skool2{asm,ctl,html,sft},sna2skool,tap2sna}.py; do
    echo -n "Running $cmdname: "
    cmd=$path/$cmdname
    if [[ ! -f $cmd ]]; then
      echo "FAILED ($cmd not found)"
      return 1
    fi
    logfile=$logdir/$cmdname.log
    $cmd &> $logfile || :
    firstword=$(head -n 1 $logfile | cut -f1 -d' ')
    if [[ "$firstword" != "usage:" ]]; then
      echo "FAILED (see $logfile)"
      return 1
    fi
    echo "OK"
  done
}

_check_man_pages() {
  echo -n "Checking man pages: "
  for cmdname in {bin2tap,skool2{asm,ctl,html,sft},sna2skool,tap2sna}.py; do
    manpage=/usr/share/man/man1/$cmdname.1.gz
    if [[ ! -f $manpage ]]; then
      echo "FAILED ($manpage not found)"
      return 1
    fi
  done
  echo "OK"
}

_check_files() {
  filetype=$1
  expdir=$2
  logdir=$3
  shift 3
  expfiles=$*

  echo -n "Checking $filetype: "
  if [[ ! -d $expdir ]]; then
    echo "FAILED ($expdir does not exist)"
    return 1
  fi
  rcount=0
  for f in $expfiles; do
    resource=$expdir/$f
    if [[ ! -f $resource ]]; then
      echo "FAILED ($f not found in $expdir)"
      return 1
    fi
    let rcount+=1
  done
  rlist=$logdir/$filetype.txt
  ls -1 $expdir > $rlist
  numresources=$(cat $rlist | grep -v examples | wc -l)
  if [[ $numresources -ne $rcount ]]; then
    echo "FAILED (unexpected files found; see $rlist)"
    return 1
  fi
  echo "OK"
}

_check_resources() {
  rootdir=$1
  logdir=$2

  _check_files resources $rootdir $logdir skoolkit{,-dark,-green,-plum,-spectrum,-wide}.css spectrum.ttf{,.txt}
}

_check_examples() {
  rootdir=$1
  logdir=$2

  _check_files examples $rootdir $logdir 48.rom.{ctl,ref} hungry_horace.{ctl,ref,t2s}
}

###############################################################################
# Run the disassemblies (MM/JSW/SD/BTS/CSC) tests
###############################################################################
test_disassemblies() {
  mkdir -p $MANICMINER_HOME/build
  mmlog=$MANICMINER_HOME/build/tests.log
  mkdir -p $JETSETWILLY_HOME/build
  jswlog=$JETSETWILLY_HOME/build/tests.log
  mkdir -p $DISASSEMBLIES_HOME/build
  sdbtscsclog=$DISASSEMBLIES_HOME/build/tests.log

  targets=$(echo test{2.7,3.{2,3,4}})
  make -C $MANICMINER_HOME $targets &> $mmlog & PID1=$!
  make -C $JETSETWILLY_HOME $targets &> $jswlog & PID2=$!
  make -C $DISASSEMBLIES_HOME $targets &> $sdbtscsclog & PID3=$!

  echo -n "Manic Miner tests: "
  wait $PID1 && echo "OK" || echo "FAILED (see $mmlog)"

  echo -n "Jet Set Willy tests: "
  wait $PID2 && echo "OK" || echo "FAILED (see $jswlog)"

  echo -n "SD/BTS/CSC tests: "
  wait $PID3 && echo "OK" || echo "FAILED (see $sdbtscsclog)"
}

###############################################################################
# Run validate-xhtml on the ROM/HH/MM/JSW/SD/BTS/CSC disassemblies
###############################################################################
_run_validate_xhtml() {
  projhome=$1
  target=$2
  htmldir=$3

  builddir=$projhome/build/html
  buildlog=$builddir/$target.log
  htmllog=$builddir/$htmldir.log
  rm -rf $builddir/$htmldir $buildlog $htmllog
  mkdir -p $builddir
  make -C $projhome $target &> $buildlog &&
  $TOOLS/validate-xhtml $builddir/$htmldir &> $htmllog
}

_wait_validate_xhtml() {
  name=$1
  pid=$2
  projhome=$3
  target=$4
  htmldir=$5

  builddir=$projhome/build/html
  htmllog=$builddir/$htmldir.log
  echo -n "$name validate-xhtml: "
  if wait $pid; then
    [[ -s $htmllog ]] && echo "VALIDATION FAILED (see $htmllog)" || echo "OK"
  else
    echo "BUILD FAILED (see $builddir/$target.log)"
  fi
}

validate_xhtml() {
  _run_validate_xhtml $SKOOLKIT_HOME rom rom & PIDrom=$!
  _run_validate_xhtml $SKOOLKIT_HOME hh hungry_horace & PIDhh=$!
  _run_validate_xhtml $MANICMINER_HOME mm manic_miner & PIDmm=$!
  _run_validate_xhtml $JETSETWILLY_HOME jsw jet_set_willy & PIDjsw=$!
  _run_validate_xhtml $DISASSEMBLIES_HOME sd skool_daze & PIDsd=$!
  _run_validate_xhtml $DISASSEMBLIES_HOME bts back_to_skool & PIDbts=$!
  _run_validate_xhtml $DISASSEMBLIES_HOME csc contact_sam_cruise & PIDcsc=$!

  _wait_validate_xhtml "Spectrum ROM" $PIDrom $SKOOLKIT_HOME rom rom
  _wait_validate_xhtml "Hungry Horace" $PIDhh $SKOOLKIT_HOME hh hungry_horace
  _wait_validate_xhtml "Manic Miner" $PIDmm $MANICMINER_HOME mm manic_miner
  _wait_validate_xhtml "Jet Set Willy" $PIDjsw $JETSETWILLY_HOME jsw jet_set_willy
  _wait_validate_xhtml "Skool Daze" $PIDsd $DISASSEMBLIES_HOME sd skool_daze
  _wait_validate_xhtml "Back to Skool" $PIDbts $DISASSEMBLIES_HOME bts back_to_skool
  _wait_validate_xhtml "Contact Sam Cruise" $PIDcsc $DISASSEMBLIES_HOME csc contact_sam_cruise
}

###############################################################################
# Run disassembly-diff on the MM/JSW/SD/BTS/CSC disassemblies
###############################################################################
disassembly_diffs() {
  mmdiffsdir=$MANICMINER_HOME/build/disassembly-diff
  jswdiffsdir=$JETSETWILLY_HOME/build/disassembly-diff
  sddiffsdir=$DISASSEMBLIES_HOME/build/sd-disassembly-diff
  btsdiffsdir=$DISASSEMBLIES_HOME/build/bts-disassembly-diff
  cscdiffsdir=$DISASSEMBLIES_HOME/build/csc-disassembly-diff
  diffslog=diffs.log
  skversion=$($SKOOLKIT_HOME/skool2html.py -V 2>&1 | cut -f2 -d' ')
  DISASSEMBLY_DIFF="$TOOLS/disassembly-diff -t"

  echo -n "Building tarball for version $skversion of SkoolKit: "
  $TOOLS/mksktarball -q -t
  echo "OK"
  for d in $mmdiffsdir $jswdiffsdir $sddiffsdir $btsdiffsdir $cscdiffsdir; do
    mkdir -p $d
    cp -p $SKOOLKIT_HOME/dist/skoolkit-${skversion}.tar.xz $d
    rm -rf $d/disassembly-current-*
  done

  (cd $mmdiffsdir; $DISASSEMBLY_DIFF mm &> $diffslog) & PIDmm=$!
  (cd $jswdiffsdir; $DISASSEMBLY_DIFF jsw &> $diffslog) & PIDjsw=$!
  (cd $sddiffsdir; $DISASSEMBLY_DIFF sd &> $diffslog) & PIDsd=$!
  (cd $btsdiffsdir; $DISASSEMBLY_DIFF bts &> $diffslog) & PIDbts=$!
  (cd $cscdiffsdir; $DISASSEMBLY_DIFF csc &> $diffslog) & PIDcsc=$!

  echo -n "Manic Miner disassembly-diff: "
  wait $PIDmm && echo -n "OK" || echo -n "FAILED"
  echo " (see $mmdiffsdir/$diffslog)"

  echo -n "Jet Set Willy disassembly-diff: "
  wait $PIDjsw && echo -n "OK" || echo -n "FAILED"
  echo " (see $jswdiffsdir/$diffslog)"

  echo -n "Skool Daze disassembly-diff: "
  wait $PIDsd && echo -n "OK" || echo -n "FAILED"
  echo " (see $sddiffsdir/$diffslog)"

  echo -n "Back to Skool disassembly-diff: "
  wait $PIDbts && echo -n "OK" || echo -n "FAILED"
  echo " (see $btsdiffsdir/$diffslog)"

  echo -n "Contact Sam Cruise disassembly-diff: "
  wait $PIDcsc && echo -n "OK" || echo -n "FAILED"
  echo " (see $cscdiffsdir/$diffslog)"
}

###############################################################################
# Run check-asms on the MM/JSW/SD/BTS/CSC disassemblies
###############################################################################
check_asms() {
  skversion=$($SKOOLKIT_HOME/skool2html.py -V 2>&1 | cut -f2 -d' ')
  asmsubdir=disassembly-current-$skversion/asm
  mmasmdir=$MANICMINER_HOME/build/disassembly-diff/$asmsubdir
  jswasmdir=$JETSETWILLY_HOME/build/disassembly-diff/$asmsubdir
  sdasmdir=$DISASSEMBLIES_HOME/build/sd-disassembly-diff/$asmsubdir
  btsasmdir=$DISASSEMBLIES_HOME/build/bts-disassembly-diff/$asmsubdir
  cscasmdir=$DISASSEMBLIES_HOME/build/csc-disassembly-diff/$asmsubdir
  asmlog=asm.log
  CHECK_ASMS=$TOOLS/check-asms

  (cd $mmasmdir; $CHECK_ASMS mm &> $asmlog) & PIDmm=$!
  (cd $jswasmdir; $CHECK_ASMS jsw &> $asmlog) & PIDjsw=$!
  (cd $sdasmdir; $CHECK_ASMS sd &> $asmlog) & PIDsd=$!
  (cd $btsasmdir; $CHECK_ASMS bts &> $asmlog) & PIDbts=$!
  (cd $cscasmdir; $CHECK_ASMS csc &> $asmlog) & PIDcsc=$!

  echo -n "Manic Miner check-asms: "
  wait $PIDmm && echo "OK" || echo "FAILED (see $mmasmdir/$asmlog)"

  echo -n "Jet Set Willy check-asms: "
  wait $PIDjsw && echo "OK" || echo "FAILED (see $jswasmdir/$asmlog)"

  echo -n "Skool Daze check-asms: "
  wait $PIDsd && echo "OK" || echo "FAILED (see $sdasmdir/$asmlog)"

  echo -n "Back to Skool check-asms: "
  wait $PIDbts && echo "OK" || echo "FAILED (see $btsasmdir/$asmlog)"

  echo -n "Contact Sam Cruise check-asms: "
  wait $PIDcsc && echo "OK" || echo "FAILED (see $cscasmdir/$asmlog)"
}

###############################################################################
# Verify that 'setup.py install' works
###############################################################################
_create_venv() {
  mkdir -p $SKTMPDIR
  cd $(mktemp -d --tmpdir=$SKTMPDIR)
  topdir=$(pwd)
  venv=$topdir/venv
  virtualenv --quiet $venv
}

_build_tarball() {
  skversion=$($SKOOLKIT_HOME/skool2html.py -V 2>&1 | cut -f2 -d' ')
  echo -n "Building tarball for version $skversion of SkoolKit: "
  $TOOLS/mksktarball -q -t
  echo "OK"
}

_install_skoolkit() {
  method=$1

  tar xf $SKOOLKIT_HOME/dist/skoolkit-$skversion.tar.xz -C $topdir
  mv $topdir/skoolkit-$skversion{,-release}
  cd $topdir/skoolkit-$skversion-release

  if [[ "$method" = "2" ]]; then
    echo -n "Building source distribution: "
    logfile=$topdir/sdist.log
    if ./setup.py sdist &> $logfile; then
      echo "OK"
    else
      echo "FAILED (see $logfile)"
      return 1
    fi
    tar xf dist/skoolkit-$skversion.tar.gz -C $topdir
    cd $topdir/skoolkit-$skversion
  fi

  echo -n "Installing SkoolKit: "
  logfile=$topdir/install.log
  if $venv/bin/python setup.py install &> $logfile; then
    echo "OK"
  else
    echo "FAILED (see $logfile)"
    return 1
  fi
}

verify_setup() {
  method=$1

  _create_venv
  _build_tarball
  _install_skoolkit $method
  _check_commands $venv/bin $topdir
  packagedir=$($venv/bin/skool2html.py -p)
  _check_resources $packagedir/resources $topdir
  _check_examples $packagedir/examples $topdir
}

###############################################################################
# Build, install and verify a DEB package
###############################################################################
build_deb() {
  skversion=$($SKOOLKIT_HOME/skool2html.py -V 2>&1 | cut -f2 -d' ')
  deb=$SKOOLKIT_HOME/dist/skoolkit_$skversion-1_all.deb
  logdir=$SKOOLKIT_HOME/dist
  mkdir -p $logdir

  sudo dpkg -r skoolkit &> /dev/null

  echo -n "Building skoolkit_$skversion-1_all.deb: "
  logfile=$logdir/debuild.log
  if ! make -C $SKOOLKIT_HOME deb &> $logfile; then
    echo "FAILED (see $logfile)"
    exit 1
  fi
  echo "OK"

  echo -n "Installing skoolkit_$skversion-1_all.deb: "
  logfile=$logdir/dpkg-i.log
  if ! sudo dpkg -i $deb &> $logfile; then
    echo "FAILED (see $logfile)"
    exit 1
  fi
  echo "OK"

  _check_commands /usr/bin $logdir
  _check_man_pages
  _check_resources /usr/share/skoolkit $logdir
  _check_examples /usr/share/skoolkit/examples $logdir

  echo -n "Uninstalling skoolkit: "
  logfile=$logdir/dpkg-r.log
  if ! sudo dpkg -r skoolkit > $logfile; then
    echo "FAILED (see $logfile)"
    exit 1
  fi
  echo "OK"

  echo "Now upload $deb to skoolkit.ca"
}

###############################################################################
# Build a source package for uploading to PyPI
###############################################################################
build_sdist() {
  skversion=$($SKOOLKIT_HOME/skool2html.py -V 2>&1 | cut -f2 -d' ')
  sktarball=$SKOOLKIT_HOME/dist/skoolkit-$skversion.tar.xz
  if [[ -f $sktarball ]]; then
    echo "Found $sktarball"
  else
    echo -n "$sktarball not found; building it: "
    $TOOLS/mksktarball -q -t
    echo "OK"
  fi
  cd $(mktemp -d --tmpdir=$HOME/tmp)
  logfile=$(pwd)/sdist.log
  tar xf $sktarball
  cd skoolkit-$skversion
  echo -n "Building source package: "
  if ./setup.py sdist &> $logfile; then
    echo "OK"
  else
    echo "FAILED (see $logfile)"
    exit 1
  fi
  sdist=skoolkit-$skversion.tar.gz
  mv dist/$sdist $SKOOLKIT_HOME/dist
  echo "Now upload $SKOOLKIT_HOME/dist/$sdist to PyPI"
}

###############################################################################
# Verify that SkoolKit can be installed from PyPI
###############################################################################
check_pypi() {
  cd $(mktemp -d --tmpdir=$HOME/tmp)
  virtualenv --quiet venv
  logfile=$(pwd)/install.log
  echo -n "Installing SkoolKit from PyPI: "
  if venv/bin/pip install skoolkit &> $logfile; then
    echo "OK"
  else
    echo "FAILED (see $logfile)"
    exit 1
  fi
}

###############################################################################
# Build a documentation zip archive for PyPI
###############################################################################
build_doczip() {
  skversion=$($SKOOLKIT_HOME/skool2html.py -V 2>&1 | cut -f2 -d' ')
  zipfile=$SKOOLKIT_HOME/dist/skoolkit-$skversion-docs.zip

  cd $(mktemp -d --tmpdir=$HOME/tmp)
  echo -n "Cloning local git repository: "
  git clone -ql $SKOOLKIT_HOME
  echo "OK"
  logfile=$(pwd)/sphinx.log
  cd skoolkit/sphinx
  echo -n "Building documentation: "
  if make html SPHINXOPTS='-D html_theme=nature' &> $logfile; then
    echo "OK"
  else
    echo "FAILED (see $logfile)"
    exit 1
  fi
  cd build/html
  rm -rf .buildinfo _sources/man man objects.inv $zipfile
  echo -n "Building zip archive: "
  zip -9qr $zipfile .
  echo "OK"
  echo "Now upload $zipfile to PyPI"
}

###############################################################################
# Print usage information
###############################################################################
usage() {
  cat >&2 <<EOM
Usage: $(basename $0) COMMAND

SkoolKit testing and release tool.

Pre-release commands:
  dtests - run the disassemblies (MM/JSW/SD/BTS/CSC) tests
  xhtmlv - run validate-xhtml on the ROM/HH/MM/JSW/SD/BTS/CSC disassemblies
  ddiffs - run disassembly-diff on the MM/JSW/SD/BTS/CSC disassemblies
  asmchk - run check-asms on the MM/JSW/SD/BTS/CSC disassemblies
  setup1 - verify that 'setup.py install' works from a release tarball
  setup2 - verify that 'setup.py install' works from an sdist tarball

Post-release commands:
  debpkg - build, install, verify and uninstall a DEB package
  bsdist - build a source package for uploading to PyPI
  ifpypi - verify that SkoolKit can be installed from PyPI
  doczip - build a documentation zip archive for PyPI
EOM
}

###############################################################################
# Parse command line
###############################################################################
case "$1" in
  dtests) test_disassemblies ;;
  xhtmlv) validate_xhtml ;;
  ddiffs) disassembly_diffs ;;
  asmchk) check_asms ;;
  setup1) verify_setup 1 ;;
  setup2) verify_setup 2 ;;
  debpkg) build_deb ;;
  bsdist) build_sdist ;;
  ifpypi) check_pypi ;;
  doczip) build_doczip ;;
       *) usage ;;
esac

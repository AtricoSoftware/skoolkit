TESTPREFIX=${TESTPREFIX:-test}

BUILD=$DHOME/build
DIST=$DHOME/dist
DTMPDIR=$HOME/tmp
VERSION=$(grep ^Release= $REFFILE | grep -o '20.\{6\}')
RELEASE=$GAME-disassembly-$VERSION
SKOOLKIT_TOOLS=$SKOOLKIT_HOME/tools
SKOOLKIT_VERSION=$(cd $SKOOLKIT_HOME; git tag | tail -n 1 | cut -c2-)

###############################################################################
# Check required environment variables
###############################################################################
_require_skoolkit_archive() {
  if [[ -z $SKOOLKIT_ARCHIVE ]]; then
    echo 'SKOOLKIT_ARCHIVE is not set; aborting'
    exit 1
  fi
  if [[ ! -d $SKOOLKIT_ARCHIVE ]]; then
    echo "SKOOLKIT_ARCHIVE=$SKOOLKIT_ARCHIVE: directory not found"
    exit 1
  fi
  SKOOLKIT_TARBALL=$SKOOLKIT_ARCHIVE/skoolkit-$SKOOLKIT_VERSION.tar.xz
}

###############################################################################
# Utility functions
###############################################################################
_exec() {
  message=$1
  command=$2
  logfile=$3
  failcode=$4

  echo -n "${message}: "
  if ! eval $command &> $logfile; then
    if [[ -z "$failcode" ]] || [[ $? -eq "$failcode" ]]; then
      echo "FAILED (see $logfile)"
      return 1
    fi
  fi
  echo "OK"
}

_cd_tmpdir() {
  mkdir -p $DTMPDIR
  cd $(mktemp -d --tmpdir=$DTMPDIR)
}

_check_files() {
  filetype=$1
  expdir=$2
  logdir=$3
  shift 3
  expfiles=$*

  echo -n "Checking $filetype: "
  if [[ ! -d $expdir ]]; then
    echo "FAILED ($expdir does not exist)"
    return 1
  fi
  rcount=0
  for f in $expfiles; do
    resource=$expdir/$f
    if [[ ! -f $resource ]]; then
      echo "FAILED ($f not found in $expdir)"
      return 1
    fi
    let rcount+=1
  done
  rlist=$logdir/$(echo $filetype | tr ' ' _).txt
  ls -1 $expdir | grep -Ev "^(html|$SRCDIR)$" > $rlist
  numresources=$(cat $rlist | wc -l)
  if [[ $numresources -ne $rcount ]]; then
    echo "FAILED (unexpected files found; see $rlist)"
    return 1
  fi
  echo "OK"
}

###############################################################################
# Build the disassembly distribution tarball and zip archive
###############################################################################
build_tarball() {
  _require_skoolkit_archive

  _cd_tmpdir
  logdir=$(pwd)
  tar xf $SKOOLKIT_TARBALL
  cd skoolkit-$SKOOLKIT_VERSION
  _exec "Building tarball and zip archive" "$MKDTARBALL" $logdir/build.log
  _exec "Validating XHTML" "$SKOOLKIT_TOOLS/validate-xhtml dist/$RELEASE/html" $logdir/validate-xhtml.log
  _exec "Checking links" "$SKOOLKIT_TOOLS/check-links.py dist/$RELEASE/html" $logdir/check-links.log
  _check_files "source files" dist/$RELEASE/$SRCDIR $logdir $SRCFILES
  _check_files "txt files" dist/$RELEASE $logdir asm.txt readme.txt
  less dist/$RELEASE/asm.txt
  less dist/$RELEASE/readme.txt
  mkdir -p $DIST
  mv dist/$RELEASE.{tar.xz,zip} $DIST
}

###############################################################################
# Update the HTML disassembly on the gh-pages branch
###############################################################################
update_ghpages() {
  _require_skoolkit_archive

  mkdir -p $BUILD
  htmldir=$BUILD/html/$GAMEDIR
  rm -rf $htmldir
  tar xf $SKOOLKIT_TARBALL -C $BUILD
  _exec "Building disassembly" "make -C $DHOME $GAME SKOOLKIT_HOME=$BUILD/skoolkit-$SKOOLKIT_VERSION HTML_OPTS='$GHHTMLOPTS'" $BUILD/$GAME-build.log

  _cd_tmpdir
  echo -n "Cloning $GHREPO repository: "
  git clone -q https://github.com/skoolkid/$GHREPO
  echo "OK"
  cd $GHREPO
  git checkout -q gh-pages
  rsync -r $htmldir/ $GHGAMEDIR
  echo
  git status -bs
  cat <<EOM

Now:
  \$ cd $(pwd)
  # Remove any files that are no longer used
  # Add any new files
  \$ git commit -am "Update $GAMENAME disassembly to $VERSION"
  \$ git push origin gh-pages
EOM
}

###############################################################################
# Run the disassembly tests
###############################################################################
test_disassembly() {
  _require_skoolkit_archive

  _cd_tmpdir
  logdir=$(pwd)
  tar xf $SKOOLKIT_TARBALL
  cd skoolkit-$SKOOLKIT_VERSION
  for v in 2.7 3.2 3.3 3.4; do
    _exec "Running $GAMENAME disassembly tests (SkoolKit $SKOOLKIT_VERSION, Python $v)" "SKOOLKIT_HOME=$(pwd) make -C $DHOME $TESTPREFIX$v" $logdir/test$v.log
  done
}

###############################################################################
# Print usage information
###############################################################################
usage() {
  cat >&2 <<EOM
Usage: $(basename $0) COMMAND [COMMAND...]

$GAMENAME disassembly testing and release tool.

Commands:
  dtests - run the disassembly tests
  tarzip - build the disassembly distribution tarball and zip archive
  ghhtml - update the HTML disassembly on the gh-pages branch
EOM
  exit 1
}

###############################################################################
# Parse command line
###############################################################################
parse_args() {
  numcommands=$#
  (($numcommands < 1)) && usage

  while [[ -n "$1" ]]; do
    [[ $numcommands -ge 2 ]] && echo "*** Running command '$1' ***"
    case "$1" in
      dtests) test_disassembly ;;
      tarzip) build_tarball ;;
      ghhtml) update_ghpages ;;
           *) echo "*** Unknown command '$1' ***"; usage ;;
    esac
    shift
  done
}

#!/usr/bin/env bash
RM_EMPTY_DIFFS=1
DEF_PREFIX="X-"
PREFIX=$DEF_PREFIX
USED_EXP_DIFFS=used-exp-diffs

UTILS=$(dirname $0)
[[ ${UTILS:0:1} = "/" ]] || UTILS=$(pwd)/$UTILS

do_diff() {
  [ -e $3 ] || return
  diff_type=$1
  oldf=$2
  newf=$3
  ofile=$4
  shift 4
  diff_opts=$*
  diff -Naur $diff_opts $oldf $newf > $ofile
  if [ $RM_EMPTY_DIFFS -eq 1 ] && [ ! -s $ofile ]; then
    rm $ofile
  fi
  if [ $CHECK_DIFFS -eq 1 ] && [ -f $ofile ]; then
    xdiff=$(dirname $ofile)/$PREFIX$(basename $ofile)
    used_exp_diffs=$(dirname $ofile)/$USED_EXP_DIFFS-$(basename $ofile .diff).txt
    exp_diffs_file=$DIFFS_DIR/exp-diffs-${diff_type}.txt
    $UTILS/check-diffs.py $exp_diffs_file $ofile > $xdiff 2> $used_exp_diffs
    if [ $RM_EMPTY_DIFFS -eq 1 ] && [ ! -s $xdiff ]; then
      rm $xdiff
    fi
  fi
}

diff_files() {
  diff_type=$1
  old=$2
  new=$3
  file_type=${4:-$diff_type}
  out=diffs-$diff_type

  rm -rf $out
  mkdir -p $out
  echo -n "Writing diffs to $out..."
  if ! ls $old/$diff_type/*.$file_type 2>&1 > /dev/null; then
    echo "no $file_type files in $old/$diff_type"
    return
  fi
  for a in $old/$diff_type/*.$file_type; do
    b=$(basename $a)
    do_diff $diff_type $a $new/$diff_type/$b $out/$b.diff
  done
  $UTILS/unique-diffs.py $out/$USED_EXP_DIFFS-*.$file_type.txt > $out/$USED_EXP_DIFFS.txt
  echo "done"
}

diff_html() {
  old=$1/html
  new=$2/html
  out=diffs-html

  rm -rf $out
  mkdir -p $out
  echo -n "Writing diffs to $out..."
  for d in $(ls -1 $new); do
    diff_file=$out/$d.html.diff
    do_diff html $old/$d $new/$d $diff_file -x '*.png' -x '*.gif'
    if [ -f $diff_file ]; then
      grep '^+++ ' $diff_file | grep -o "$d/.*.html" > $out/$d.files
    fi
  done
  $UTILS/unique-diffs.py $out/$USED_EXP_DIFFS-*.html.txt > $out/$USED_EXP_DIFFS.txt
  echo "done"
}

diff_images() {
  img_type=$1
  old=$2
  new=$3

  out=diffs-$img_type
  echo -n "Writing diffs to $out..."
  rm -rf $old/$img_type $new/$img_type
  game=$(ls -1 $new/html | head -1)
  find $old/html/$game -name "*.$img_type" | while read old_img; do
    img_path=${old_img#$old/}
    if [ -f $new/$img_path ] && ! cmp -s $old_img $new/$img_path; then
      for d in $old $new; do
        dump_file=$d/$img_type/${img_path#html/$game}.dump
        mkdir -p $(dirname $dump_file)
        $UTILS/analyse-$img_type.py --dump $d/$img_path > $dump_file
      done
    fi
  done
  rm -rf $out
  mkdir -p $out
  diff_file=$out/$img_type.diff
  do_diff $img_type $old/$img_type $new/$img_type $diff_file
  $UTILS/unique-diffs.py $out/$USED_EXP_DIFFS-*.$img_type.txt > $out/$USED_EXP_DIFFS.txt
  echo "done"
}

print_usage() {
  cat >&2 << EOM
Usage: $(basename $0) [options] DIR1 DIR2 TYPE [TYPE...]

  Runs 'diff' on the ASM, BIN, CTL, GIF, HTML, PNG, SKOOL or SFT files in two
  directories and outputs the results to suitably named files.

  TYPE can be one of: asm bin ctl genctl gif html png skool sft all

Options:
  -d DIR     Filter diff files through check-diffs.py using exp-diffs-TYPE.txt
             files in this directory
  -k         Do not remove empty diff files
  -p PREFIX  Name filtered diff files with this prefix (default: '$DEF_PREFIX')
EOM
  exit 1
}

###############################################################################
# Begin...
###############################################################################
CHECK_DIFFS=0
while getopts ":cd:e:p:k" opt; do
  case $opt in
    d) CHECK_DIFFS=1; DIFFS_DIR=$OPTARG ;;
    p) PREFIX=$OPTARG ;;
    k) RM_EMPTY_DIFFS=0 ;;
    *) print_usage ;;
  esac
done

if [ $# -lt 3 ]; then
  print_usage
fi

shift $(($OPTIND - 1))

OLD=$1
NEW=$2

if [ ! -d $OLD ]; then
  echo "$OLD: directory not found"
  exit 1
fi
if [ ! -d $NEW ]; then
  echo "$NEW: directory not found"
  exit 1
fi

shift 2

while [ "$1" != "" ]; do
  case "$1" in
    asm) diff_files asm $OLD $NEW ;;
    bin) diff_files bin $OLD $NEW dump ;;
    ctl) diff_files ctl $OLD $NEW ;;
    genctl) diff_files genctl $OLD $NEW ctl ;;
    gif) diff_images gif $OLD $NEW ;;
    html) diff_html $OLD $NEW ;;
    png) diff_images png $OLD $NEW ;;
    skool) diff_files skool $OLD $NEW ;;
    sft) diff_files sft $OLD $NEW ;;
    all)
      diff_files asm $OLD $NEW
      diff_bins bin $OLD $NEW
      diff_files ctl $OLD $NEW
      diff_files genctl $OLD $NEW ctl
      diff_images gif $OLD $NEW
      diff_html $OLD $NEW
      diff_images png $OLD $NEW
      diff_files skool $OLD $NEW
      diff_files sft $OLD $NEW
      ;;
    *) echo "Skipping unknown file type: '$1'" ;;
  esac
  shift
done

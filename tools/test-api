#!/usr/bin/env bash

# Verify that the code examples in the 'Extending SkoolKit' documentation
# actually work

write_skool() {
  cat <<EOF
@start
@writer=skoolkit.game.GameAsmWriter

; Start
;
@ignoreua
; Test the timestamp() method: #CALL:timestamp()
; .
; Test the TIMESTAMP macro: #TIMESTAMP
; .
; Test the snapshot attribute: the word at 32768 is #WORD32768
; .
; #UDGTABLE
; { #SPRITE4(j4*)        | #SPRITE6(*j6)        | #UDGARRAY*j4;j6(anim.gif) }
; { #CHR(35)SPRITE4(j4*) | #CHR(35)SPRITE6(*j6) | #CHR(35)UDGARRAY*j4;j6(anim.gif) }
; TABLE#
; .
; #UDGTABLE
; { #CALL:sprite(3,j3) }
; { #CHR(35)CALL:sprite(3,j3) }
; TABLE#
; .
; #UDGTABLE
; { #INVERSE32768,56 }
; { #CHR(35)INVERSE32768,56 }
; TABLE#
; .
; #UDGTABLE
; { #CALL:countdown(countdown.gif) }
; { #CHR(35)CALL:countdown(countdown.gif) }
; TABLE#
; .
; #CALL:copyright() 2015 Me
b32768 DEFB 1,2,4,8,16,32,64,128
 32776 DEFB 0,60,70,74,82,98,60,0 ; '0'
 32784 DEFB 0,24,40,8,8,8,62,0    ; '1'
 32792 DEFB 0,60,66,2,60,64,126,0 ; '2'
 32800 DEFB 0,60,66,12,2,66,60,0  ; '3'
EOF
}

write_ref() {
  cat <<EOF
[Config]
HtmlWriterClass=skoolkit.game.GameHtmlWriter

[Template:simple]
{text}
EOF
}

write_module() {
  cat <<EOF
import time

from skoolkit.graphics import Udg, Frame
from skoolkit.skoolhtml import HtmlWriter
from skoolkit.skoolasm import AsmWriter
from skoolkit.skoolmacro import parse_ints, parse_image_macro

class GameHtmlWriter(HtmlWriter):
    def init(self):
        self.init_called = 1

    def sprite(self, cwd, attr, fname):
        img_path = self.image_path(fname)
        if self.need_image(img_path):
            # Build udgs for the sprite
            udgs = [[Udg(attr, self.snapshot[32768:32776])]]
            self.write_image(img_path, udgs)
        return self.img_element(cwd, img_path)

    # #SPRITEattr[{x,y,width,height}](fname)
    def expand_sprite(self, text, index, cwd):
        end, crop_rect, fname, frame, alt, (attr,) = parse_image_macro(text, index, names=['attr'])
        udgs = [[Udg(attr, self.snapshot[32768:32776])]] * 2
        frames = [Frame(udgs, 2, 0, *crop_rect, name=frame)]
        return end, self.handle_image(frames, fname, cwd, alt)

    # #WORDaddress
    def expand_word(self, text, index, cwd):
        end, address = parse_ints(text, index, 1)
        return end, str(self.snapshot[address] + 256 * self.snapshot[address + 1])

    # #INVERSEaddress,attr
    def expand_inverse(self, text, index, cwd):
        end, address, attr = parse_ints(text, index, 2)
        img_path = self.image_path('inverse{0}_{1}'.format(address, attr))
        if self.need_image(img_path):
            udg_data = [b ^ 255 for b in self.snapshot[address:address + 8]]
            udg = Udg(attr, udg_data)
            self.write_image(img_path, [[udg]])
        return end, self.img_element(cwd, img_path)

    def countdown(self, cwd, fname):
        img_path = self.image_path(fname)
        if self.need_image(img_path):
            attr = 56
            kwargs = dict(scale=4, x=2, y=2, width=28, height=28, delay=100)
            frames = [Frame([[Udg(attr, self.snapshot[32800:32808])]], **kwargs)]
            frames.append(Frame([[Udg(attr, self.snapshot[32792:32800])]], **kwargs))
            frames.append(Frame([[Udg(attr, self.snapshot[32784:32792])]], **kwargs))
            frames.append(Frame([[Udg(attr, self.snapshot[32776:32784])]], **kwargs))
            self.write_animated_image(img_path, frames)
        return self.img_element(cwd, img_path)

    def timestamp(self, cwd):
        return time.strftime("%a %d %b %Y %H:%M:%S %Z")

    def expand_timestamp(self, text, index, cwd):
        return index, time.strftime("%a %d %b %Y %H:%M:%S %Z")

    def copyright(self, cwd):
        if not hasattr(self, 'init_called'):
            raise Exception('init() not called')
        return self.format_template('simple', {'text': self.expand('#CHR169')})

class GameAsmWriter(AsmWriter):
    def init(self):
        self.init_called = 1

    # #WORDaddress
    def expand_word(self, text, index):
        end, address = parse_ints(text, index, 1)
        return end, str(self.snapshot[address] + 256 * self.snapshot[address + 1])

    def timestamp(self):
        return time.strftime("%a %d %b %Y %H:%M:%S %Z")

    def expand_timestamp(self, text, index):
        return index, time.strftime("%a %d %b %Y %H:%M:%S %Z")

    def copyright(self):
        if not hasattr(self, 'init_called'):
            raise Exception('init() not called')
        return self.expand('#CHR169')
EOF
}

SKOOL2HTML=./skool2html.py
SKOOL2ASM=./skool2asm.py
if [ ! -f $SKOOL2HTML ] || [ ! -f $SKOOL2ASM ] || [ ! -d skoolkit ]; then
  if [ -z "$SKOOLKIT_HOME" ]; then
    echo "Error: SKOOLKIT_HOME not defined."
    exit 1
  fi
  if [ ! -d "$SKOOLKIT_HOME" ]; then
    echo "Error: directory not found: $SKOOLKIT_HOME"
    exit 1
  fi
  cd $SKOOLKIT_HOME
fi

write_skool > build/game.skool
write_ref > build/game.ref
write_module > skoolkit/game.py

rm -rf build/html/game
$SKOOL2HTML -d build/html build/game.ref
$SKOOL2ASM build/game.skool > build/game.asm

rm skoolkit/game.py*
